@page "/CreateTrip"
@model BaruchsTreks.Pages.CreateTripModel

@using BaruchsTreks.Data;
@using BaruchsTreks.Enums;
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager

@{
    ViewData["Title"] = "CreateTrip";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var isContributor = false;
    if (User.Identity?.Name != null)
    {
        var loggedUser = await UserManager.FindByNameAsync(User.Identity.Name);
        isContributor = loggedUser?.IsContributor ?? false;
    }
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

<h1>CreateTrip</h1>

<div class="row">
    <div class="col-md-6">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="trip.Title" class="control-label"></label>
                <input asp-for="trip.Title" class="form-control" />
                <span asp-validation-for="trip.Title" class="text-danger"></span>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label asp-for="trip.TripClass" class="control-label">Category</label>
                    @Html.DropDownListFor(model => model.trip.TripClass, new SelectList(Model.TripClassList, "Key", "Value"), "--Vyber kategorii--", new {@class = "form-control"} )
                    <span asp-validation-for="trip.TripClass" class="text-danger"></span>
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="trip.TripCompletedOn"></label>
                    @Html.TextBoxFor(model => model.trip.TripCompletedOn, new { @type="date", @class = "form-control datepicker",  @Value = Model.trip.TripCompletedOn?.ToString("dd/MM/yyyy") } )
                    <span asp-validation-for="trip.TripCompletedOn" class="text-danger"></span>
                </div>

            </div>
            <div class="form-group">
                <label asp-for="trip.Description" class="control-label"></label>
                <textarea asp-for="trip.Description" class="form-control" rows="6"></textarea>
                <span asp-validation-for="trip.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="trip.Participants" class="control-label"></label>
                <input asp-for="trip.Participants" class="form-control" />
                <span asp-validation-for="trip.Participants" class="text-danger"></span>
            </div>
            <div class="row">
                <div class="form-group col-md-4">
                    <label asp-for="trip.LengthHours" class="control-label">Length in hours</label> 
                    <input asp-for="trip.LengthHours" class="form-control" />
                    <span asp-validation-for="trip.LengthHours" class="text-danger"></span>
                </div>
                <div class="form-group col-md-4">
                    <label asp-for="trip.MetersAscend" class="control-label">Meters ascend</label>
                    <input asp-for="trip.MetersAscend" class="form-control" />
                    <span asp-validation-for="trip.MetersAscend" class="text-danger"></span>
                </div>
                <div class="form-group col-md-4">
                    <label asp-for="trip.MetersDescend" class="control-label">Meters descend</label>
                    <input asp-for="trip.MetersDescend" class="form-control" />
                    <span asp-validation-for="trip.MetersDescend" class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-md-4">
                    <label asp-for="trip.UiaaGrade" class="control-label">UIAA grade</label>
                    @Html.DropDownListFor(model => model.trip.UiaaGrade, new SelectList(Model.UiaaGradeList, "Key", "Value"), "--Select UIAA Grade--", new {@class = "form-control"} )
                    <span asp-validation-for="trip.UiaaGrade" class="text-danger"></span>
                </div>

                <div class="form-group col-md-4">
                    <label asp-for="trip.AlpineGrade" class="control-label">Alpine grade</label>
                    @Html.DropDownListFor(model => model.trip.AlpineGrade, new SelectList(Model.AlpineGradeList, "Key", "Value"), "--Select Alpine Grade--", new {@class = "form-control"} )
                    <span asp-validation-for="trip.AlpineGrade" class="text-danger"></span>
                </div>

                <div class="form-group col-md-4">
                    <label asp-for="trip.FerataGrade" class="control-label">Ferrata grade</label>
                    @Html.DropDownListFor(model => model.trip.AlpineGrade, new SelectList(Model.FerrataGradeList, "Key", "Value"), "--Select Ferrata Grade--", new {@class = "form-control"} )
                    <span asp-validation-for="trip.FerataGrade" class="text-danger"></span>
                </div>
            </div>

            <br />
            <div class="form-group">
                <label class="control-label">High point</label>
                <div class="input-group mb-3">
                    <input type="text" id="highPointSearch" class="form-control" placeholder="Search location...">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" id="highPointSearchBtn">Search</button>
                    </div>
                </div>
                <div id="mHigh" style="height:380px"></div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label asp-for="Hlo" class="control-label">Longitude</label>
                    <input asp-for="Hlo" class="form-control" type="" />
                    <span asp-validation-for="Hlo" class="text-danger"></span>
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="Hla" class="control-label">Latitude</label>
                    <input asp-for="Hla" class="form-control" />
                    <span asp-validation-for="Hla" class="text-danger"></span>
                </div>
            </div>

            <br />
            <div class="form-group">
                <label class="control-label">Start</label>
                <div class="input-group mb-3">
                    <input type="text" id="parkingSearch" class="form-control" placeholder="Search location...">
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" id="parkingSearchBtn">Search</button>
                    </div>
                </div>
                <div id="mParking" style="height:380px"></div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label asp-for="Plo" class="control-label">Longitude</label>
                    <input asp-for="Plo"class="form-control" />
                    <span asp-validation-for="Plo" class="text-danger"></span>
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="Pla" class="control-label">Latitude</label>
                    <input asp-for="Pla" class="form-control disabled" />
                    <span asp-validation-for="Pla" class="text-danger"></span>
                </div>
            </div>
            <br />

            <input type="hidden" asp-for="trip.Modified" />
            <input type="hidden" asp-for="trip.Created" />

            @if (isContributor)
            {
                <div class="form-group">
                    <input type="submit" value="Submit" class="btn btn-primary edit-button" />
                </div>
            }
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@*https://developer.mapy.cz/rest-api/*@

<script type="text/javascript">
    // API key for mapy.cz REST API - Replace with your actual API key
    const API_KEY = 'QJdxpgMs2Px5Sf1xkHfTDKh1JcT4PhmVeK2eid5COZI';
    
    // Default coordinates if inputs are empty (center of Czech Republic)
    const defaultLat = 49.8175;
    const defaultLon = 15.4730;
    
    // Get coordinates from inputs or use defaults
    let highLon = document.getElementById("Hlo").value || defaultLon;
    let highLat = document.getElementById("Hla").value || defaultLat;
    let parkingLon = document.getElementById("Plo").value || defaultLon;
    let parkingLat = document.getElementById("Pla").value || defaultLat;
    
    // Initialize maps when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize high point map
        const mHigh = L.map('mHigh').setView([highLat, highLon], 13);
        
        // Add tile layer from mapy.cz REST API
        L.tileLayer('https://api.mapy.cz/v1/maptiles/basic/256/{z}/{x}/{y}?apikey=' + API_KEY, {
            minZoom: 1,
            maxZoom: 19,
            attribution: '<a href="https://mapy.cz/" target="_blank">Mapy.cz</a>'
        }).addTo(mHigh);
        
        // Add Mapy.cz logo for proper attribution
        const mapyczLogo = L.control({position: 'bottomleft'});
        mapyczLogo.onAdd = function() {
            const div = L.DomUtil.create('div', 'mapycz-logo');
            div.innerHTML = '<a href="https://mapy.cz/" target="_blank"><img src="https://api.mapy.cz/img/api/logo.svg" alt="Mapy.cz" style="height:24px;"></a>';
            return div;
        };
        mapyczLogo.addTo(mHigh);
        
        // Add marker to high point map
        const highMarker = L.marker([highLat, highLon], {
            draggable: true,
            title: "High point",
            autoPan: true
        }).addTo(mHigh);
        
        // Handle marker drag events for high point
        highMarker.on('dragstart', function(event) {
            mHigh.dragging.disable(); // Temporarily disable map dragging during marker drag
        });
        
        highMarker.on('dragend', function(event) {
            const position = highMarker.getLatLng();
            document.getElementById("Hla").value = position.lat;
            document.getElementById("Hlo").value = position.lng;
            mHigh.dragging.enable(); // Re-enable map dragging
        });
        
        // Initialize parking map
        const mParking = L.map('mParking').setView([parkingLat, parkingLon], 13);
        
        // Add tile layer from mapy.cz REST API
        L.tileLayer('https://api.mapy.cz/v1/maptiles/basic/256/{z}/{x}/{y}?apikey=' + API_KEY, {
            minZoom: 1,
            maxZoom: 19,
            attribution: '<a href="https://mapy.cz/" target="_blank">Mapy.cz</a>'
        }).addTo(mParking);
        
        // Add Mapy.cz logo for proper attribution
        const mapyczLogo2 = L.control({position: 'bottomleft'});
        mapyczLogo2.onAdd = function() {
            const div = L.DomUtil.create('div', 'mapycz-logo');
            div.innerHTML = '<a href="https://mapy.cz/" target="_blank"><img src="https://api.mapy.cz/img/api/logo.svg" alt="Mapy.cz" style="height:24px;"></a>';
            return div;
        };
        mapyczLogo2.addTo(mParking);
        
        // Add marker to parking map
        const parkingMarker = L.marker([parkingLat, parkingLon], {
            draggable: true,
            title: "Start",
            autoPan: true
        }).addTo(mParking);
        
        // Handle marker drag events for parking
        parkingMarker.on('dragstart', function(event) {
            mParking.dragging.disable(); // Temporarily disable map dragging during marker drag
        });
        
        parkingMarker.on('dragend', function(event) {
            const position = parkingMarker.getLatLng();
            document.getElementById("Pla").value = position.lat;
            document.getElementById("Plo").value = position.lng;
            mParking.dragging.enable(); // Re-enable map dragging
        });
        
        // Setup search functionality for high point
        const highPointSearchInput = document.getElementById("highPointSearch");
        const highPointSearchBtn = document.getElementById("highPointSearchBtn");
        
        // Handle search button click for high point
        highPointSearchBtn.addEventListener("click", function() {
            searchLocation(highPointSearchInput.value, mHigh, highMarker, "Hla", "Hlo");
        });
        
        // Handle Enter key press for high point search
        highPointSearchInput.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                e.preventDefault();
                searchLocation(highPointSearchInput.value, mHigh, highMarker, "Hla", "Hlo");
            }
        });
        
        // Setup search functionality for parking
        const parkingSearchInput = document.getElementById("parkingSearch");
        const parkingSearchBtn = document.getElementById("parkingSearchBtn");
        
        // Handle search button click for parking
        parkingSearchBtn.addEventListener("click", function() {
            searchLocation(parkingSearchInput.value, mParking, parkingMarker, "Pla", "Plo");
        });
        
        // Handle Enter key press for parking search
        parkingSearchInput.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                e.preventDefault();
                searchLocation(parkingSearchInput.value, mParking, parkingMarker, "Pla", "Plo");
            }
        });
        
        // Function to search for a location and update the map and marker
        function searchLocation(query, map, marker, latInputId, lonInputId) {
            if (!query.trim()) return;
            
            // Prepare the query - ensure it's properly encoded for multi-word searches
            const encodedQuery = encodeURIComponent(query.trim());
            
            // Call the geocode API
            fetch(`https://api.mapy.cz/v1/geocode?query=${encodedQuery}&limit=10&lang=cs&apikey=${API_KEY}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`API responded with status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.items && data.items.length > 0) {
                        const result = data.items[0];
                        const lat = result.position.lat;
                        const lon = result.position.lon;
                        
                        // Update map and marker
                        map.setView([lat, lon], 15);
                        marker.setLatLng([lat, lon]);
                        
                        // Update form inputs
                        document.getElementById(latInputId).value = lat;
                        document.getElementById(lonInputId).value = lon;
                    } else {
                        console.error("No results found for query:", query);
                        alert("Nenalezeno. Zkuste upřesnit hledání.");
                    }
                })
                .catch(error => {
                    console.error("Error searching location:", error);
                    alert("Chyba při hledání. Zkuste to znovu.");
                });
        }
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
